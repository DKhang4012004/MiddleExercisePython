class ShowMenu:
    @staticmethod
    def display_main_menu():
        """Hi·ªÉn th·ªã menu ch√≠nh"""
        print("\n" + "=" * 50)
        print(" " * 18 + "MENU CH√çNH")
        print("=" * 50)
        print("1.  Th√™m sinh vi√™n m·ªõi")
        print("2.  Th√™m sinh vi√™n cao h·ªçc")
        print("3.  Hi·ªÉn th·ªã danh s√°ch sinh vi√™n")
        print("4.  X√≥a sinh vi√™n")
        print("5.  C·∫≠p nh·∫≠t th√¥ng tin sinh vi√™n")
        print("6.  T√¨m theo ID sinh vi√™n")
        print("7.  Th·ªëng k√™ theo gi·ªõi t√≠nh")
        print("8.  Th·ªëng k√™ theo ƒë·ªô tu·ªïi")
        print("9.  Th·ªëng k√™ theo n∆°i sinh")
        print("10.  Th·ªëng k√™ theo chuy√™n ng√†nh")
        print("11.  Th·ªëng k√™ theo x·∫øp lo·∫°i h·ªçc t·∫≠p")
        print("12.  Top sinh vi√™n xu·∫•t s·∫Øc")
        print("0.  Tho√°t ch∆∞∆°ng tr√¨nh")
        print("=" * 50)

    @staticmethod
    def wait_for_user():
        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

    @staticmethod
    def format_table_row(data, widths):
        row = "|"
        for i, item in enumerate(data):
            # C·∫Øt chu·ªói n·∫øu qu√° d√†i
            if len(str(item)) > widths[i]:
                item = str(item)[:widths[i] - 3] + "..."
            row += f" {str(item):<{widths[i]}} |"
        return row

    @staticmethod
    def display_table_header(headers, widths):
        border = "+"
        for width in widths:
            border += "-" * (width + 2) + "+"
        print(border)

        print(ShowMenu.format_table_row(headers, widths))

        print(border)

    @staticmethod
    def display_table_header( headers, widths):
        border = "+"
        for width in widths:
            border += "-" * (width + 2) + "+"
        print(border)

        print(ShowMenu.format_table_row(headers, widths))

        print(border)

    @staticmethod
    def display_table_footer( widths):
        border = "+"
        for width in widths:
            border += "-" * (width + 2) + "+"
        print(border)

    @staticmethod
    def display_students_table(students, title="DANH S√ÅCH SINH VI√äN"):
        if not students:
            print("Kh√¥ng c√≥ sinh vi√™n n√†o ƒë·ªÉ hi·ªÉn th·ªã.")
            return

        print(f"\nüìã {title}")
        print("=" * 120)

        # ƒê·ªãnh nghƒ©a ƒë·ªô r·ªông c√°c c·ªôt
        widths = [8, 20, 5, 8, 15, 18, 6, 12, 25]
        headers = ["ID", "H·ªç t√™n", "Tu·ªïi", "Gi·ªõi t√≠nh", "N∆°i sinh", "Chuy√™n ng√†nh", "GPA", "X·∫øp lo·∫°i", "Vai tr√≤/ƒê·ªÅ t√†i"]

        ShowMenu.display_table_header(headers, widths)

        for student in students:
            extra_info = student.get_role()
            if hasattr(student, 'thesis_topic'):
                extra_info = student.thesis_topic

            row_data = [
                student.student_id,
                student.name,
                student.age,
                student.gender,
                student.birthplace,
                student.major,
                f"{student.gpa:.2f}",
                student.get_academic_level(),
                extra_info
            ]

            print(ShowMenu.format_table_row(row_data, widths))

        ShowMenu.display_table_footer(widths)
        print(f" T·ªïng c·ªông: {len(students)} sinh vi√™n")

    @staticmethod
    def display_statistics_table( title, data_dict, value_name="S·ªë l∆∞·ª£ng"):
        """Hi·ªÉn th·ªã th·ªëng k√™ d∆∞·ªõi d·∫°ng b·∫£ng"""
        print(f"\n {title}")
        print("=" * 60)

        if not data_dict:
            print("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ th·ªëng k√™.")
            return

        total = sum(data_dict.values()) if isinstance(list(data_dict.values())[0], (int, float)) else len(data_dict)

        max_key_length = max(len(str(key)) for key in data_dict.keys())
        key_width = max(15, max_key_length)
        widths = [key_width, 12, 12, 15]
        headers = ["Danh m·ª•c", value_name, "Ph·∫ßn trƒÉm", "Bi·ªÉu ƒë·ªì"]

        ShowMenu.display_table_header(headers, widths)

        sorted_data = sorted(data_dict.items(), key=lambda x: x[1], reverse=True)

        for key, value in sorted_data:
            if isinstance(value, (int, float)) and total > 0:
                percentage = (value / total) * 100
                bar = "‚ñà" * int(percentage // 2)
                row_data = [str(key), str(value), f"{percentage:.1f}%", bar]
            else:
                row_data = [str(key), str(value), "N/A", ""]

            print(ShowMenu.format_table_row(row_data, widths))

        ShowMenu.display_table_footer(widths)
        print(f" T·ªïng c·ªông: {total}")

    @staticmethod
    def display_top_students_table( students, n):
        if not students:
            print(" Kh√¥ng c√≥ d·ªØ li·ªáu sinh vi√™n!")
            return

        print(f"\n TOP {min(n, len(students))} SINH VI√äN C√ì GPA CAO NH·∫§T")
        print("=" * 80)

        widths = [5, 8, 20, 6, 12, 18, 8]
        headers = ["H·∫°ng", "ID", "H·ªç t√™n", "GPA", "X·∫øp lo·∫°i", "Chuy√™n ng√†nh", "N∆°i sinh"]

        ShowMenu.display_table_header(headers, widths)

        for i, student in enumerate(students, 1):
            rank = str(i)

            row_data = [
                rank,
                student.student_id,
                student.name,
                f"{student.gpa:.2f}",
                student.get_academic_level(),
                student.major,
                student.birthplace
            ]

            print(ShowMenu.format_table_row(row_data, widths))

        ShowMenu.display_table_footer(widths)

    @staticmethod
    def display_header():
        print("=" * 70)
        print(" " * 15 + "H·ªÜ TH·ªêNG QU·∫¢N L√ù SINH VI√äN OOP")
        print("=" * 70)

